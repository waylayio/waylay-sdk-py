# serializer version: 1
# name: test_deserialize[content_bin_*_bytearray][bytes@{'*': <class 'bytes'>}]
  tuple(
    b'some binary file content,',
    202,
    dict({
      '*': <class 'bytes'>,
    }),
    None,
    'bytes',
    b'some binary file content,',
  )
# ---
# name: test_deserialize[content_bin_XX_bytearay][bytes@{'2XX': 'bytearray'}]
  tuple(
    b'some binary file content,',
    202,
    dict({
      '2XX': 'bytearray',
    }),
    None,
    'bytes',
    b'some binary file content,',
  )
# ---
# name: test_deserialize[content_bin_bytearray][bytes@{'202': <class 'bytearray'>}]
  tuple(
    b'some binary file content,',
    202,
    dict({
      '202': <class 'bytearray'>,
    }),
    None,
    'bytes',
    b'some binary file content,',
  )
# ---
# name: test_deserialize[content_none][str@]
  tuple(
    b'',
    200,
    dict({
    }),
    None,
    'str',
    '',
  )
# ---
# name: test_deserialize[content_none_none][str@{'200': None}]
  tuple(
    b'',
    200,
    dict({
      '200': None,
    }),
    None,
    'str',
    '',
  )
# ---
# name: test_deserialize[content_str_model][Pet@{'*': <class 'unit.api.example.pet_model.Pet'>}]
  tuple(
    b'{"name":"Lord Biscuit, Master of Naps","owner":{"id":123,"name":"Simon"},"tag":"doggo"}',
    200,
    dict({
      '*': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_bool][bool@]
  tuple(
    b'true',
    200,
    dict({
    }),
    None,
    'bool',
    True,
  )
# ---
# name: test_deserialize[json_bool_bool][bool@{'200': 'bool'}]
  tuple(
    b'false',
    200,
    dict({
      '200': 'bool',
    }),
    None,
    'bool',
    False,
  )
# ---
# name: test_deserialize[json_dict0][SimpleNamespace@]
  tuple(
    b'{"hello": "world", "key": [1, 2, 3]}',
    200,
    dict({
    }),
    None,
    'SimpleNamespace',
    namespace(hello='world', key=[1, 2, 3]),
  )
# ---
# name: test_deserialize[json_dict1][SimpleNamespace@]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
    }),
    None,
    'SimpleNamespace',
    namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_*_dict][dict@{'*': 'Dict[str, str]'}]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '*': 'Dict[str, str]',
    }),
    None,
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize[json_dict_*_union][Pet@{'*': <class 'unit.api.example.pet_model.Pet'>}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '*': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_*_union_str][Pet@{'*': 'unit.api.example.pet_model.PetUnion'}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '*': 'unit.api.example.pet_model.PetUnion',
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_2XX_dict][dict@{'2XX': typing.Dict[str, str]}]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '2XX': typing.Dict[str, str],
    }),
    None,
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize[json_dict_any][SimpleNamespace@{'200': typing.Any}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': typing.Any,
    }),
    None,
    'SimpleNamespace',
    namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_default_dict][SimpleNamespace@{'default': <class 'dict'>}]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      'default': <class 'dict'>,
    }),
    None,
    'SimpleNamespace',
    namespace(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize[json_dict_dict][dict@{'201': typing.Dict[str, str]}]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '201': typing.Dict[str, str],
    }),
    None,
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize[json_dict_model][Pet@{'200': <class 'unit.api.example.pet_model.Pet'>}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_modelstr][Pet@{'200': 'unit.api.example.pet_model.Pet'}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': 'unit.api.example.pet_model.Pet',
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_no_mapping][SimpleNamespace@{'4XX': typing.Dict[str, str]}]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '4XX': typing.Dict[str, str],
    }),
    None,
    'SimpleNamespace',
    namespace(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize[json_dict_none][SimpleNamespace@{'200': None}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': None,
    }),
    None,
    'SimpleNamespace',
    namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_object][dict@{'200': <class 'object'>}]
  tuple(
    b'{"hello": "world", "key": [1, 2, 3]}',
    200,
    dict({
      '200': <class 'object'>,
    }),
    None,
    'dict',
    dict({
      'hello': 'world',
      'key': list([
        1,
        2,
        3,
      ]),
    }),
  )
# ---
# name: test_deserialize[json_dict_str_path_name][str@{'200': <class 'str'>}name]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': <class 'str'>,
    }),
    'name',
    'str',
    'Lord Biscuit, Master of Naps',
  )
# ---
# name: test_deserialize[json_dict_union][Pet@{'200': typing.Union[str, list[unit.api.example.pet_model.Pet], unit.api.example.pet_model.Pet]}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': typing.Union[str, list[unit.api.example.pet_model.Pet], unit.api.example.pet_model.Pet],
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_wrongmodelstr][SimpleNamespace@{'200': 'unit.api.example.pet_model.Unexisting'}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': 'unit.api.example.pet_model.Unexisting',
    }),
    None,
    'SimpleNamespace',
    namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_wrongmodulestr][SimpleNamespace@{'200': 'some.unexisting.module.Pet'}]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': 'some.unexisting.module.Pet',
    }),
    None,
    'SimpleNamespace',
    namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_list][list@]
  tuple(
    b'["hello", "world", 123, {"key": "value"}]',
    200,
    dict({
    }),
    None,
    'list',
    list([
      'hello',
      'world',
      123,
      namespace(key='value'),
    ]),
  )
# ---
# name: test_deserialize[json_list_*_union][PetList@{'*': 'unit.api.example.pet_model.PetUnion'}]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '*': 'unit.api.example.pet_model.PetUnion',
    }),
    None,
    'PetList',
    PetList(pets=[Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'), Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo')]),
  )
# ---
# name: test_deserialize[json_list_XX_list_int][list@{'2XX': typing.List[int]}]
  tuple(
    b'["11", "22", 33]',
    200,
    dict({
      '2XX': typing.List[int],
    }),
    None,
    'list',
    list([
      11,
      22,
      33,
    ]),
  )
# ---
# name: test_deserialize[json_list_X_list_int_str][list@{'2XX': 'List[int]'}]
  tuple(
    b'["11", "22", 33]',
    200,
    dict({
      '2XX': 'List[int]',
    }),
    None,
    'list',
    list([
      11,
      22,
      33,
    ]),
  )
# ---
# name: test_deserialize[json_list_X_union][list@{'2XX': typing.List[typing.Union[str, int, typing.Dict[str, typing.Any]]]}]
  tuple(
    b'["hello", "world", 123, {"key": "value"}]',
    200,
    dict({
      '2XX': typing.List[typing.Union[str, int, typing.Dict[str, typing.Any]]],
    }),
    None,
    'list',
    list([
      'hello',
      'world',
      123,
      dict({
        'key': 'value',
      }),
    ]),
  )
# ---
# name: test_deserialize[json_list_list_path_[*].name][list@{'200': 'List[str]'}[*].name]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': 'List[str]',
    }),
    '[*].name',
    'list',
    list([
      'Lord Biscuit, Master of Naps',
    ]),
  )
# ---
# name: test_deserialize[json_list_list_path_pets[*].name][list@{'200': 'List[str]'}pets[*].name]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': 'List[str]',
    }),
    'pets[*].name',
    'list',
    list([
      'Lord Biscuit, Master of Naps',
      'Lord Biscuit, Master of Naps',
    ]),
  )
# ---
# name: test_deserialize[json_list_model][PetList@{'200': <class 'unit.api.example.pet_model.PetList'>}]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.PetList'>,
    }),
    None,
    'PetList',
    PetList(pets=[Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'), Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo')]),
  )
# ---
# name: test_deserialize[json_list_model_path_pets][list@{'200': typing.List[unit.api.example.pet_model.Pet]}pets]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': typing.List[unit.api.example.pet_model.Pet],
    }),
    'pets',
    'list',
    list([
      Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
      Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
    ]),
  )
# ---
# name: test_deserialize[json_list_x_list][list@{'2XX': <class 'list'>}]
  tuple(
    b'["hello", "world", 123, {"key": "value"}]',
    200,
    dict({
      '2XX': <class 'list'>,
    }),
    None,
    'list',
    list([
      'hello',
      'world',
      123,
      namespace(key='value'),
    ]),
  )
# ---
# name: test_deserialize[json_number][int@]
  tuple(
    b'123',
    200,
    dict({
    }),
    None,
    'int',
    123,
  )
# ---
# name: test_deserialize[json_str][str@]
  tuple(
    b'"123"',
    200,
    dict({
    }),
    None,
    'str',
    '123',
  )
# ---
# name: test_deserialize[json_str_bool][bool@{'200': <class 'bool'>}]
  tuple(
    b'true',
    200,
    dict({
      '200': <class 'bool'>,
    }),
    None,
    'bool',
    True,
  )
# ---
# name: test_deserialize[primitive_json_float][float@{'200': 'float'}]
  tuple(
    b'123.456',
    200,
    dict({
      '200': 'float',
    }),
    None,
    'float',
    123.456,
  )
# ---
# name: test_deserialize[primitive_text_float][float@{'200': <class 'float'>}]
  tuple(
    b'123.456',
    200,
    dict({
      '200': <class 'float'>,
    }),
    None,
    'float',
    123.456,
  )
# ---
# name: test_deserialize[primitive_text_int][int@{'200': <class 'int'>}]
  tuple(
    b'123',
    200,
    dict({
      '200': <class 'int'>,
    }),
    None,
    'int',
    123,
  )
# ---
# name: test_deserialize[text_datestr_str][str@{'2XX': <class 'str'>}]
  tuple(
    b'2023-12-25T00:01:00',
    200,
    dict({
      '2XX': <class 'str'>,
    }),
    None,
    'str',
    '2023-12-25T00:01:00',
  )
# ---
# name: test_deserialize[text_str0][str@]
  tuple(
    b'some_text_resopnse',
    200,
    dict({
    }),
    None,
    'str',
    'some_text_resopnse',
  )
# ---
# name: test_deserialize[text_str1][str@]
  tuple(
    b'2023-12-25T00:01:00',
    200,
    dict({
    }),
    None,
    'str',
    '2023-12-25T00:01:00',
  )
# ---
# name: test_deserialize[text_str_Enum][PetType@{'*': <enum 'PetType'>}]
  tuple(
    b'dog',
    200,
    dict({
      '*': <enum 'PetType'>,
    }),
    None,
    'PetType',
    <PetType.DOG: 'dog'>,
  )
# ---
# name: test_deserialize[text_str_date][date@{'2XX': <class 'datetime.date'>}]
  tuple(
    b'2023-12-25T00:01:00',
    200,
    dict({
      '2XX': <class 'datetime.date'>,
    }),
    None,
    'date',
    datetime.date(2023, 12, 25),
  )
# ---
# name: test_deserialize[text_str_datetime][datetime@{'200': <class 'datetime.datetime'>}]
  tuple(
    b'2023-12-25T00:01:00',
    200,
    dict({
      '200': <class 'datetime.datetime'>,
    }),
    None,
    'datetime',
    datetime.datetime(2023, 12, 25, 0, 1),
  )
# ---
# name: test_deserialize[text_str_invalid_date][str@{'2XX': <class 'datetime.date'>}]
  tuple(
    b'2023/12/25:12.02.20',
    200,
    dict({
      '2XX': <class 'datetime.date'>,
    }),
    None,
    'str',
    '2023/12/25:12.02.20',
  )
# ---
# name: test_deserialize[text_str_model][Pet@{'2XX': <class 'unit.api.example.pet_model.Pet'>}]
  tuple(
    b'{"name":"Lord Biscuit, Master of Naps","owner":{"id":123,"name":"Simon"},"tag":"doggo"}',
    200,
    dict({
      '2XX': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[text_str_str][str@{'200': <class 'str'>}]
  tuple(
    b'some_text_resopnse',
    200,
    dict({
      '200': <class 'str'>,
    }),
    None,
    'str',
    'some_text_resopnse',
  )
# ---
# name: test_deserialize[text_str_str_str][str@{'200': 'str'}]
  tuple(
    b'some_text_resopnse',
    200,
    dict({
      '200': 'str',
    }),
    None,
    'str',
    'some_text_resopnse',
  )
# ---
# name: test_deserialize_error_responses[response_kwargs0-response_type_map0][{'404': typing.Dict[str, str]}]
  tuple(
    '''
      ApiError(404)
      Reason: Not Found
      HTTP response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      HTTP response content: {'message': 'some not found message', 'code': 'RESOURCE_NOT_FOUND'}
      
      )
    ''',
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs1-response_type_map1][{'4XX': <class 'dict'>}]
  tuple(
    '''
      ApiError(404)
      Reason: Not Found
      HTTP response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      HTTP response content: namespace(message='some not found message', code='RESOURCE_NOT_FOUND')
      
      )
    ''',
    'SimpleNamespace',
    namespace(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs2-response_type_map2][{'4XX': typing.Any}]
  tuple(
    '''
      ApiError(404)
      Reason: Not Found
      HTTP response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      HTTP response content: namespace(message='some not found message', code='RESOURCE_NOT_FOUND')
      
      )
    ''',
    'SimpleNamespace',
    namespace(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs3-response_type_map3][{'4XX': typing.Any}]
  tuple(
    '''
      ApiError(404)
      Reason: Not Found
      HTTP response headers: Headers({'content-length': '22', 'content-type': 'text/plain; charset=utf-8'})
      HTTP response content: some not found message
      
      )
    ''',
    'str',
    'some not found message',
  )
# ---
# name: test_deserialize_error_responses[response_kwargs4-response_type_map4][{}]
  tuple(
    '''
      ApiError(404)
      Reason: Not Found
      HTTP response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      HTTP response content: namespace(message='some not found message', code='RESOURCE_NOT_FOUND')
      
      )
    ''',
    'SimpleNamespace',
    namespace(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs5-response_type_map5][{'400': <class 'unit.api.example.pet_model.Pet'>}]
  tuple(
    '''
      ApiError(400)
      Reason: Bad Request
      HTTP response headers: Headers({'content-length': '95', 'content-type': 'application/json'})
      HTTP response content: name='Lord Biscuit, Master of Naps' owner=PetOwner(id=123, name='Simon') tag='doggo'
      
      )
    ''',
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs6-response_type_map6][{'default': typing.Any}]
  tuple(
    '''
      ApiError(400)
      Reason: Bad Request
      HTTP response headers: Headers({'content-length': '87'})
      HTTP response content: namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo')
      
      )
    ''',
    'SimpleNamespace',
    namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs7-response_type_map7][{}]
  tuple(
    '''
      ApiError(400)
      Reason: Bad Request
      HTTP response headers: Headers({'content-length': '95', 'content-type': 'application/json'})
      HTTP response content: namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo')
      
      )
    ''',
    'SimpleNamespace',
    namespace(name='Lord Biscuit, Master of Naps', owner=namespace(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_serialize_and_call[binary_body]
  dict({
    '_content': b'..some binary content..',
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-type': 'application/octet-stream', 'content-length': '23'}),
    'method': 'POST',
    'stream': ByteStream(
    ),
    'url': URL('https://api-example.io/service/v1/bar/foo'),
  })
# ---
# name: test_serialize_and_call[binary_body].1
  tuple(
    list([
      <Request('POST', 'https://api-example.io/service/v1/bar/foo')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-type': 'application/octet-stream', 'content-length': '23'}),
        b'..some binary content..',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[body_and_files]
  dict({
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-type': 'application/x-www-form-urlencoded', 'content-length': '155'}),
    'method': 'POST',
    'stream': MultipartStream(
      boundary=b'---boundary---',
      content_type='multipart/form-data; boundary=---boundary---',
      fields=list([
        FileField(
          CHUNK_SIZE=65536,
          file=b'<binary>',
          filename='upload',
          headers=dict({
            'Content-Type': 'application/octet-stream',
          }),
          name='file1',
        ),
      ]),
    ),
    'url': URL('https://api-example.io/service/v1/bar/foo'),
  })
# ---
# name: test_serialize_and_call[body_and_files].1
  tuple(
    list([
      <Request('POST', 'https://api-example.io/service/v1/bar/foo')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-type': 'application/x-www-form-urlencoded', 'content-length': '155'}),
        b'-----boundary---\r\nContent-Disposition: form-data; name="file1"; filename="upload"\r\nContent-Type: application/octet-stream\r\n\r\n<binary>\r\n-----boundary-----\r\n',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[files]
  dict({
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '328', 'content-type': 'multipart/form-data; boundary=---boundary---'}),
    'method': 'POST',
    'stream': MultipartStream(
      boundary=b'---boundary---',
      content_type='multipart/form-data; boundary=---boundary---',
      fields=list([
        FileField(
          CHUNK_SIZE=65536,
          file=b'<... binary content ...>',
          filename='upload',
          headers=dict({
            'Content-Type': 'application/octet-stream',
          }),
          name='file1',
        ),
        FileField(
          CHUNK_SIZE=65536,
          file='<... other binary content ...>',
          filename='upload',
          headers=dict({
            'Content-Type': 'application/octet-stream',
          }),
          name='file2',
        ),
      ]),
    ),
    'url': URL('https://api-example.io/service/v1/cruz/?key1=15'),
  })
# ---
# name: test_serialize_and_call[files].1
  tuple(
    list([
      <Request('POST', 'https://api-example.io/service/v1/cruz/?key1=15')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '328', 'content-type': 'multipart/form-data; boundary=---boundary---'}),
        b'-----boundary---\r\nContent-Disposition: form-data; name="file1"; filename="upload"\r\nContent-Type: application/octet-stream\r\n\r\n<... binary content ...>\r\n-----boundary---\r\nContent-Disposition: form-data; name="file2"; filename="upload"\r\nContent-Type: application/octet-stream\r\n\r\n<... other binary content ...>\r\n-----boundary-----\r\n',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[form]
  dict({
    '_content': b'{"key": "value"}',
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-type': 'application/x-www-form-urlencoded', 'content-length': '16'}),
    'method': 'POST',
    'stream': ByteStream(
    ),
    'url': URL('https://api-example.io/service/v1/bar/foo'),
  })
# ---
# name: test_serialize_and_call[form].1
  tuple(
    list([
      <Request('POST', 'https://api-example.io/service/v1/bar/foo')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-type': 'application/x-www-form-urlencoded', 'content-length': '16'}),
        b'{"key": "value"}',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[params_and_body]
  dict({
    '_content': b'{"array_key": ["val1", "val2"], "tuple_key": ["val3", 123, {"key": "value"}, null], "timestamp": "1999-09-28T12:30:59"}',
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'x-my-header': 'header_value', 'content-length': '119', 'content-type': 'application/json'}),
    'method': 'PATCH',
    'stream': ByteStream(
    ),
    'url': URL('https://api-example.io/service/v1/A/bar/%7Bmissing_param%7D'),
  })
# ---
# name: test_serialize_and_call[params_and_body].1
  tuple(
    list([
      <Request('PATCH', 'https://api-example.io/service/v1/A/bar/%7Bmissing_param%7D')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'x-my-header': 'header_value', 'content-length': '119', 'content-type': 'application/json'}),
        b'{"array_key": ["val1", "val2"], "tuple_key": ["val3", 123, {"key": "value"}, null], "timestamp": "1999-09-28T12:30:59"}',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[params_and_query]
  dict({
    '_content': b'',
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'x-my-header': 'header_value'}),
    'method': 'GET',
    'stream': ByteStream(
    ),
    'url': URL('https://api-example.io/service/v1/A/foo/B?key1=value1&key2=value2'),
  })
# ---
# name: test_serialize_and_call[params_and_query].1
  tuple(
    list([
      <Request('GET', 'https://api-example.io/service/v1/A/foo/B?key1=value1&key2=value2')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'x-my-header': 'header_value'}),
        b'',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[pet_body]
  dict({
    '_content': b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '95', 'content-type': 'application/json'}),
    'method': 'PUT',
    'stream': ByteStream(
    ),
    'url': URL('https://api-example.io/service/v1/C/foo'),
  })
# ---
# name: test_serialize_and_call[pet_body].1
  tuple(
    list([
      <Request('PUT', 'https://api-example.io/service/v1/C/foo')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '95', 'content-type': 'application/json'}),
        b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[pet_dict_body]
  dict({
    '_content': b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '95', 'content-type': 'application/json'}),
    'method': 'PUT',
    'stream': ByteStream(
    ),
    'url': URL('https://api-example.io/service/v1/C/foo'),
  })
# ---
# name: test_serialize_and_call[pet_dict_body].1
  tuple(
    list([
      <Request('PUT', 'https://api-example.io/service/v1/C/foo')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '95', 'content-type': 'application/json'}),
        b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
      ),
    ]),
  )
# ---
# name: test_serialize_and_call[pet_json_body]
  dict({
    '_content': b'"{\\"name\\":\\"Lord Biscuit, Master of Naps\\",\\"owner\\":{\\"id\\":123,\\"name\\":\\"Simon\\"},\\"tag\\":\\"doggo\\"}"',
    'extensions': dict({
      'timeout': dict({
        'connect': 5.0,
        'pool': 5.0,
        'read': 5.0,
        'write': 5.0,
      }),
    }),
    'headers': Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '105', 'content-type': 'application/json'}),
    'method': 'PUT',
    'stream': ByteStream(
    ),
    'url': URL('https://api-example.io/service/v1/C/foo'),
  })
# ---
# name: test_serialize_and_call[pet_json_body].1
  tuple(
    list([
      <Request('PUT', 'https://api-example.io/service/v1/C/foo')>,
    ]),
    list([
      tuple(
        Headers({'host': 'api-example.io', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'waylay-sdk/python/0.0.3', 'content-length': '105', 'content-type': 'application/json'}),
        b'"{\\"name\\":\\"Lord Biscuit, Master of Naps\\",\\"owner\\":{\\"id\\":123,\\"name\\":\\"Simon\\"},\\"tag\\":\\"doggo\\"}"',
      ),
    ]),
  )
# ---
