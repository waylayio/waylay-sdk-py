# serializer version: 1
# name: test_deserialize[content_bin_*_bytearray]
  tuple(
    b'some binary file content,',
    202,
    dict({
      '*': <class 'bytes'>,
    }),
    None,
    'bytes',
    b'some binary file content,',
  )
# ---
# name: test_deserialize[content_bin_XX_bytearay]
  tuple(
    b'some binary file content,',
    202,
    dict({
      '2XX': 'bytearray',
    }),
    None,
    'bytes',
    b'some binary file content,',
  )
# ---
# name: test_deserialize[content_bin_bytearray]
  tuple(
    b'some binary file content,',
    202,
    dict({
      '202': <class 'bytearray'>,
    }),
    None,
    'bytes',
    b'some binary file content,',
  )
# ---
# name: test_deserialize[content_none]
  tuple(
    b'',
    200,
    dict({
    }),
    None,
    'str',
    '',
  )
# ---
# name: test_deserialize[content_none_none]
  tuple(
    b'',
    200,
    dict({
      '200': None,
    }),
    None,
    'str',
    '',
  )
# ---
# name: test_deserialize[content_str_model]
  tuple(
    b'{"name":"Lord Biscuit, Master of Naps","owner":{"id":123,"name":"Simon"},"tag":"doggo"}',
    200,
    dict({
      '*': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[dict_with_self_model]
  tuple(
    b'{"self": "me"}',
    200,
    dict({
      '*': Model,
    }),
    None,
    '_Model',
    _Model(self='me'),
  )
# ---
# name: test_deserialize[json_bool]
  tuple(
    b'true',
    200,
    dict({
    }),
    None,
    'bool',
    True,
  )
# ---
# name: test_deserialize[json_bool_bool]
  tuple(
    b'false',
    200,
    dict({
      '200': 'bool',
    }),
    None,
    'bool',
    False,
  )
# ---
# name: test_deserialize[json_dict0]
  tuple(
    b'{"hello": "world", "key": [1, 2, 3]}',
    200,
    dict({
    }),
    None,
    '_Model',
    _Model(hello='world', key=[1, 2, 3]),
  )
# ---
# name: test_deserialize[json_dict1]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
    }),
    None,
    '_Model',
    _Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_*_dummy_union]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '*': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_*_union]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '*': typing.Union[unit.api.example.pet_model.PetList, unit.api.example.pet_model.Pet],
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_2XX_dict]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '2XX': typing.Dict[str, str],
    }),
    None,
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize[json_dict_any]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': typing.Any,
    }),
    None,
    'dict',
    dict({
      'name': 'Lord Biscuit, Master of Naps',
      'owner': dict({
        'id': 123,
        'name': 'Simon',
      }),
      'tag': 'doggo',
    }),
  )
# ---
# name: test_deserialize[json_dict_any_model]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': Model,
    }),
    None,
    '_Model',
    _Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_default_dict]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      'default': <class 'dict'>,
    }),
    None,
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize[json_dict_dict]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '201': typing.Dict[str, str],
    }),
    None,
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize[json_dict_model]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_model_any]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': typing.Any,
    }),
    None,
    'dict',
    dict({
      'name': 'Lord Biscuit, Master of Naps',
      'owner': dict({
        'id': 123,
        'name': 'Simon',
      }),
      'tag': 'doggo',
    }),
  )
# ---
# name: test_deserialize[json_dict_namespace]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '2XX': <class 'types.SimpleNamespace'>,
    }),
    None,
    '_Model',
    _Model(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize[json_dict_no_mapping]
  tuple(
    b'{"message": "some not found message", "code": "RESOURCE_NOT_FOUND"}',
    201,
    dict({
      '4XX': typing.Dict[str, str],
    }),
    None,
    '_Model',
    _Model(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize[json_dict_none]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': None,
    }),
    None,
    '_Model',
    _Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_dict_object]
  tuple(
    b'{"hello": "world", "key": [1, 2, 3]}',
    200,
    dict({
      '200': <class 'object'>,
    }),
    None,
    'dict',
    dict({
      'hello': 'world',
      'key': list([
        1,
        2,
        3,
      ]),
    }),
  )
# ---
# name: test_deserialize[json_dict_str_path_name]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': <class 'str'>,
    }),
    'name',
    'str',
    'Lord Biscuit, Master of Naps',
  )
# ---
# name: test_deserialize[json_dict_union]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': typing.Union[str, list[unit.api.example.pet_model.Pet], unit.api.example.pet_model.Pet],
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[json_list]
  tuple(
    b'["hello", "world", 123, {"key": "value"}]',
    200,
    dict({
    }),
    None,
    'list',
    list([
      'hello',
      'world',
      123,
      _Model(key='value'),
    ]),
  )
# ---
# name: test_deserialize[json_list_*_union]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '*': typing.Union[unit.api.example.pet_model.PetList, unit.api.example.pet_model.Pet],
    }),
    None,
    'PetList',
    PetList(pets=[Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'), Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo')]),
  )
# ---
# name: test_deserialize[json_list_XX_list_int]
  tuple(
    b'["11", "22", 33]',
    200,
    dict({
      '2XX': typing.List[int],
    }),
    None,
    'list',
    list([
      11,
      22,
      33,
    ]),
  )
# ---
# name: test_deserialize[json_list_X_union]
  tuple(
    b'["hello", "world", 123, {"key": "value"}]',
    200,
    dict({
      '2XX': typing.List[typing.Union[str, int, typing.Dict[str, typing.Any]]],
    }),
    None,
    'list',
    list([
      'hello',
      'world',
      123,
      dict({
        'key': 'value',
      }),
    ]),
  )
# ---
# name: test_deserialize[json_list_any_model]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '*': Model,
    }),
    None,
    '_Model',
    _Model(pets=[_Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo'), _Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo')]),
  )
# ---
# name: test_deserialize[json_list_any_model_path_pets]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': typing.List[Model],
    }),
    'pets',
    'list',
    list([
      _Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo'),
      _Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo'),
    ]),
  )
# ---
# name: test_deserialize[json_list_list_path_[*].name]
  tuple(
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
    200,
    dict({
      '200': typing.List[ForwardRef('str')],
    }),
    '[*].name',
    'list',
    list([
      'Lord Biscuit, Master of Naps',
    ]),
  )
# ---
# name: test_deserialize[json_list_list_path_pets[*].name]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': typing.List[str],
    }),
    'pets[*].name',
    'list',
    list([
      'Lord Biscuit, Master of Naps',
      'Lord Biscuit, Master of Naps',
    ]),
  )
# ---
# name: test_deserialize[json_list_list_path_pets[0].name]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': <class 'str'>,
    }),
    'pets[0].name',
    'str',
    'Lord Biscuit, Master of Naps',
  )
# ---
# name: test_deserialize[json_list_list_path_pets[1:].name]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': typing.List[str],
    }),
    'pets[1:].name',
    'list',
    list([
      'Lord Biscuit, Master of Naps',
    ]),
  )
# ---
# name: test_deserialize[json_list_model]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.PetList'>,
    }),
    None,
    'PetList',
    PetList(pets=[Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'), Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo')]),
  )
# ---
# name: test_deserialize[json_list_model_path_pets]
  tuple(
    b'{"pets": [{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}, {"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}]}',
    200,
    dict({
      '200': typing.List[unit.api.example.pet_model.Pet],
    }),
    'pets',
    'list',
    list([
      Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
      Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
    ]),
  )
# ---
# name: test_deserialize[json_list_x_list]
  tuple(
    b'["hello", "world", 123, {"key": "value"}]',
    200,
    dict({
      '2XX': <class 'list'>,
    }),
    None,
    'list',
    list([
      'hello',
      'world',
      123,
      dict({
        'key': 'value',
      }),
    ]),
  )
# ---
# name: test_deserialize[json_model_invalid_field]
  tuple(
    b'{"name": 111, "owner": {"id": 456, "name": "Simon"}}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name=111, owner=PetOwner(id=456, name='Simon'), tag=None),
  )
# ---
# name: test_deserialize[json_model_invalid_submodel_field]
  tuple(
    b'{"name": 111, "owner": {"id": "invalidId", "name": "Simon"}}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name=111, owner=PetOwner(id='invalidId', name='Simon'), tag=None),
  )
# ---
# name: test_deserialize[json_model_invalid_submodel_list_field]
  tuple(
    b'{"pets": [{"name": 111, "owner": {"id": "invalidId", "name": "Simon"}}, {"name": "Chop"}]}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.PetList'>,
    }),
    None,
    'PetList',
    PetList(pets=[Pet(name=111, owner=PetOwner(id='invalidId', name='Simon'), tag=None), Pet(name='Chop', tag=None)]),
  )
# ---
# name: test_deserialize[json_model_invalid_submodule_list]
  tuple(
    b'[{"name": 111, "owner": {"id": "invalidId", "name": "Simon"}}, {"name": "Chop"}]',
    200,
    dict({
      '200': typing.List[unit.api.example.pet_model.Pet],
    }),
    None,
    'list',
    list([
      Pet(name=111, owner=PetOwner(id='invalidId', name='Simon'), tag=None),
      Pet(name='Chop', tag=None),
    ]),
  )
# ---
# name: test_deserialize[json_model_missing_field]
  tuple(
    b'{"owner": {"id": 456, "name": "Simontis"}}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(owner=PetOwner(id=456, name='Simontis'), tag=None),
  )
# ---
# name: test_deserialize[json_model_missing_submodel_field]
  tuple(
    b'{"name": "Chop"}',
    200,
    dict({
      '200': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Chop', tag=None),
  )
# ---
# name: test_deserialize[json_number]
  tuple(
    b'123',
    200,
    dict({
    }),
    None,
    'int',
    123,
  )
# ---
# name: test_deserialize[json_str]
  tuple(
    b'"123"',
    200,
    dict({
    }),
    None,
    'str',
    '123',
  )
# ---
# name: test_deserialize[json_str_bool]
  tuple(
    b'true',
    200,
    dict({
      '200': <class 'bool'>,
    }),
    None,
    'bool',
    True,
  )
# ---
# name: test_deserialize[primitive_json_float]
  tuple(
    b'123.456',
    200,
    dict({
      '200': 'float',
    }),
    None,
    'float',
    123.456,
  )
# ---
# name: test_deserialize[primitive_text_float]
  tuple(
    b'123.456',
    200,
    dict({
      '200': <class 'float'>,
    }),
    None,
    'float',
    123.456,
  )
# ---
# name: test_deserialize[primitive_text_int]
  tuple(
    b'123',
    200,
    dict({
      '200': <class 'int'>,
    }),
    None,
    'int',
    123,
  )
# ---
# name: test_deserialize[text_datestr_str]
  tuple(
    b'2023-12-25T00:01:00',
    200,
    dict({
      '2XX': <class 'str'>,
    }),
    None,
    'str',
    '2023-12-25T00:01:00',
  )
# ---
# name: test_deserialize[text_str0]
  tuple(
    b'some_text_resopnse',
    200,
    dict({
    }),
    None,
    'str',
    'some_text_resopnse',
  )
# ---
# name: test_deserialize[text_str1]
  tuple(
    b'2023-12-25T00:01:00',
    200,
    dict({
    }),
    None,
    'str',
    '2023-12-25T00:01:00',
  )
# ---
# name: test_deserialize[text_str_Enum]
  tuple(
    b'dog',
    200,
    dict({
      '*': <enum 'PetType'>,
    }),
    None,
    'PetType',
    <PetType.DOG: 'dog'>,
  )
# ---
# name: test_deserialize[text_str_date]
  tuple(
    b'2023-12-25',
    200,
    dict({
      '2XX': <class 'datetime.date'>,
    }),
    None,
    'date',
    datetime.date(2023, 12, 25),
  )
# ---
# name: test_deserialize[text_str_datetime]
  tuple(
    b'2023-12-25T00:01:00',
    200,
    dict({
      '200': <class 'datetime.datetime'>,
    }),
    None,
    'datetime',
    datetime.datetime(2023, 12, 25, 0, 1),
  )
# ---
# name: test_deserialize[text_str_invalid_date]
  tuple(
    b'2023/12/25:12.02.20',
    200,
    dict({
      '2XX': <class 'datetime.date'>,
    }),
    None,
    'str',
    '2023/12/25:12.02.20',
  )
# ---
# name: test_deserialize[text_str_model]
  tuple(
    b'{"name":"Lord Biscuit, Master of Naps","owner":{"id":123,"name":"Simon"},"tag":"doggo"}',
    200,
    dict({
      '2XX': <class 'unit.api.example.pet_model.Pet'>,
    }),
    None,
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize[text_str_str]
  tuple(
    b'some_text_resopnse',
    200,
    dict({
      '200': <class 'str'>,
    }),
    None,
    'str',
    'some_text_resopnse',
  )
# ---
# name: test_deserialize[text_str_str_str]
  tuple(
    b'some_text_resopnse',
    200,
    dict({
      '200': 'str',
    }),
    None,
    'str',
    'some_text_resopnse',
  )
# ---
# name: test_deserialize_error_responses[response_kwargs0-response_type_map0][{'404': typing.Dict[str, str]}]
  tuple(
    '''
      ApiError
      Status: 404
      Reason: Not Found
      Response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      Response content: <bytes: len=67>
      Response data: {'message': 'some not found message', 'code': 'RESOURCE_NOT_FOUND'}
    ''',
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs1-response_type_map1][{'4XX': <class 'dict'>}]
  tuple(
    '''
      ApiError
      Status: 404
      Reason: Not Found
      Response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      Response content: <bytes: len=67>
      Response data: {'message': 'some not found message', 'code': 'RESOURCE_NOT_FOUND'}
    ''',
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs2-response_type_map2][{'4XX': typing.Any}]
  tuple(
    '''
      ApiError
      Status: 404
      Reason: Not Found
      Response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      Response content: <bytes: len=67>
      Response data: {'message': 'some not found message', 'code': 'RESOURCE_NOT_FOUND'}
    ''',
    'dict',
    dict({
      'code': 'RESOURCE_NOT_FOUND',
      'message': 'some not found message',
    }),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs3-response_type_map3][{'4XX': typing.Any}]
  tuple(
    '''
      ApiError
      Status: 404
      Reason: Not Found
      Response headers: Headers({'content-length': '22', 'content-type': 'text/plain; charset=utf-8'})
      Response content: <bytes: len=22>
      Response data: some not found message
    ''',
    'str',
    'some not found message',
  )
# ---
# name: test_deserialize_error_responses[response_kwargs4-response_type_map4][{}]
  tuple(
    '''
      ApiError
      Status: 404
      Reason: Not Found
      Response headers: Headers({'content-length': '67', 'content-type': 'application/json'})
      Response content: <bytes: len=67>
      Response data: message='some not found message' code='RESOURCE_NOT_FOUND'
    ''',
    '_Model',
    _Model(message='some not found message', code='RESOURCE_NOT_FOUND'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs5-response_type_map5][{'400': <class 'unit.api.example.pet_model.Pet'>}]
  tuple(
    '''
      ApiError
      Status: 400
      Reason: Bad Request
      Response headers: Headers({'content-length': '95', 'content-type': 'application/json'})
      Response content: <bytes: len=95>
      Response data: name='Lord Biscuit, Master of Naps' owner=PetOwner(id=123, name='Simon') tag='doggo'
    ''',
    'Pet',
    Pet(name='Lord Biscuit, Master of Naps', owner=PetOwner(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs6-response_type_map6][{'default': typing.Any}]
  tuple(
    '''
      ApiError
      Status: 400
      Reason: Bad Request
      Response headers: Headers({'content-length': '87'})
      Response content: <bytes: len=87>
      Response data: {'name': 'Lord Biscuit, Master of Naps', 'owner': {'id': 123, 'name': 'Simon'}, 'tag': 'doggo'}
    ''',
    'dict',
    dict({
      'name': 'Lord Biscuit, Master of Naps',
      'owner': dict({
        'id': 123,
        'name': 'Simon',
      }),
      'tag': 'doggo',
    }),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs7-response_type_map7][{}]
  tuple(
    '''
      ApiError
      Status: 400
      Reason: Bad Request
      Response headers: Headers({'content-length': '95', 'content-type': 'application/json'})
      Response content: <bytes: len=95>
      Response data: name='Lord Biscuit, Master of Naps' owner=_Model(id=123, name='Simon') tag='doggo'
    ''',
    '_Model',
    _Model(name='Lord Biscuit, Master of Naps', owner=_Model(id=123, name='Simon'), tag='doggo'),
  )
# ---
# name: test_deserialize_error_responses[response_kwargs8-response_type_map8][{}]
  tuple(
    '''
      ApiError
      Request: GET http://all?debug=true
      Request headers: Headers({'host': 'all', 'x-feature': 'flagged'})
      Request content: <bytes: len=0>
      Status: 400
      Reason: Bad Request
      Response headers: Headers({'content-length': '3'})
      Response content: <streaming: len=0>
    ''',
    'NoneType',
    None,
  )
# ---
# name: test_deserialize_partially_fetched_error_stream
  tuple(
    '''
      ApiError
      Status: 400
      Reason: Bad Request
      Response headers: Headers({'content-length': '3'})
      Response content: <streaming: len=1>
    ''',
    'NoneType',
    None,
  )
# ---
# name: test_serialize_and_call[binary_async_iterable]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/bar/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'host': 'api-example.io',
      'transfer-encoding': 'chunked',
    }),
    b'itersomebinarycontent',
  )
# ---
# name: test_serialize_and_call[binary_body]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/bar/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '23',
      'host': 'api-example.io',
    }),
    b'..some binary content..',
  )
# ---
# name: test_serialize_and_call[binary_io]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/bar/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'host': 'api-example.io',
      'transfer-encoding': 'chunked',
    }),
    b'some binary content',
  )
# ---
# name: test_serialize_and_call[binary_io_buffer]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/bar/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'host': 'api-example.io',
      'transfer-encoding': 'chunked',
    }),
    b'"""Unit tests for the api client."""\n',
  )
# ---
# name: test_serialize_and_call[binary_iterable]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/bar/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'host': 'api-example.io',
      'transfer-encoding': 'chunked',
    }),
    b'somebinarycontent',
  )
# ---
# name: test_serialize_and_call[data_and_files]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/bar/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '226',
      'content-type': 'multipart/form-data; boundary=---boundary---',
      'host': 'api-example.io',
    }),
    b'-----boundary---\r\nContent-Disposition: form-data; name="key"\r\n\r\nvalue\r\n-----boundary---\r\nContent-Disposition: form-data; name="file1"; filename="upload"\r\nContent-Type: application/octet-stream\r\n\r\n<binary>\r\n-----boundary-----\r\n',
  )
# ---
# name: test_serialize_and_call[files]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/cruz/?key1=15'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '328',
      'content-type': 'multipart/form-data; boundary=---boundary---',
      'host': 'api-example.io',
    }),
    b'-----boundary---\r\nContent-Disposition: form-data; name="file1"; filename="upload"\r\nContent-Type: application/octet-stream\r\n\r\n<... binary content ...>\r\n-----boundary---\r\nContent-Disposition: form-data; name="file2"; filename="upload"\r\nContent-Type: application/octet-stream\r\n\r\n<... other binary content ...>\r\n-----boundary-----\r\n',
  )
# ---
# name: test_serialize_and_call[form]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'POST',
      'url': URL('https://api-example.io/service/v1/bar/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '9',
      'content-type': 'application/x-www-form-urlencoded',
      'host': 'api-example.io',
    }),
    b'key=value',
  )
# ---
# name: test_serialize_and_call[params_and_body]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'PATCH',
      'url': URL('https://api-example.io/service/v1/A/bar/%7Bmissing_param%7D'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '119',
      'content-type': 'application/json',
      'host': 'api-example.io',
      'x-my-header': 'header_value',
    }),
    b'{"array_key": ["val1", "val2"], "tuple_key": ["val3", 123, {"key": "value"}, null], "timestamp": "1999-09-28T12:30:59"}',
  )
# ---
# name: test_serialize_and_call[path_and_query_params]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'GET',
      'url': URL('https://api-example.io/service/v1/A/foo/B?key1=value1&key2=value2'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'host': 'api-example.io',
      'x-my-header': 'header_value',
    }),
    b'',
  )
# ---
# name: test_serialize_and_call[pet_body]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'PUT',
      'url': URL('https://api-example.io/service/v1/C/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '95',
      'content-type': 'application/json',
      'host': 'api-example.io',
    }),
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
  )
# ---
# name: test_serialize_and_call[pet_dict_body]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'PUT',
      'url': URL('https://api-example.io/service/v1/C/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '95',
      'content-type': 'application/json',
      'host': 'api-example.io',
    }),
    b'{"name": "Lord Biscuit, Master of Naps", "owner": {"id": 123, "name": "Simon"}, "tag": "doggo"}',
  )
# ---
# name: test_serialize_and_call[pet_json_body]
  tuple(
    dict({
      'extensions': dict({
        'timeout': dict({
          'connect': 5.0,
          'pool': 5.0,
          'read': 5.0,
          'write': 5.0,
        }),
      }),
      'method': 'PUT',
      'url': URL('https://api-example.io/service/v1/C/foo'),
    }),
    dict({
      'accept': '*/*',
      'accept-encoding': 'gzip, deflate',
      'connection': 'keep-alive',
      'content-length': '105',
      'content-type': 'application/json',
      'host': 'api-example.io',
    }),
    b'"{\\"name\\":\\"Lord Biscuit, Master of Naps\\",\\"owner\\":{\\"id\\":123,\\"name\\":\\"Simon\\"},\\"tag\\":\\"doggo\\"}"',
  )
# ---
